program ::= { declaration };

declaration ::=  function_declaration
               | variable_declaration
               | statement
               ;

statement ::=  expr_statement
             | if_statement
             | match_statement
             | struct_statement
             | block_statement
             | while_statement
             | for_statement
             | loop_statement
             | impl_statement
             | trait_statement
             ;

expr_statement ::= expression [ ";" ];
expression ::= literal
             | identifier
             | function_call
             | unary_expression
             | binary_expression
             | grouping
             ;

literal ::= number | string | boolean
function_call ::= identifier "(" [ argument_list ] ")" ;
unary_expression ::= ( "-" | "!" ) expression ;
binary_expression ::= expression binary_operator expression ;
binary_operator ::= "+" | "-" | "*" | "/" | "%"
                  | "==" | "!=" | "<" | "<=" | ">"
                  | ">=" | "&&" | "||" | "&" | "|" ;
grouping ::= "(" expression ")" ;

if_statement ::= "if" [ "(" ] expression [ ")" ] block_statement [ else_clause ];
else_clause ::= "else" ( if_statement | block_statement );

match_satement ::= "match" expression "{" match_arm { match_arm } "}";
match_arm ::= pattern "=>" block_statement;
pattern ::= literal | identifier | range_pattern | tuple_pattern | struct_pattern | wildcard;

struct_statement ::= "struct" identifier "{" field_list "}"
field_list ::=  { field_declaration };
field_declaration ::=  identifier ":" type { "," identifier ":" type } [ "," ]; 

while_statement ::= "while" ( "(" expression ")" | expression ) block_statement
                  | "while" "let" pattern "=" expression block_statement ;

for_statement ::= "for" pattern "in" expression block_statement ;

loop_statement ::= "loop" block_statement ;

impl_statement ::= "impl" ( identifier | trait_impl )  "{" { function_declaration } "}" ;
trait_impl ::= identifier "for" identifier ;

trait_statement ::= "trait" identifier "{" { trait_method } "}" ;

